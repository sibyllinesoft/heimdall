version: '3.8'

services:
  bifrost-router:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=production
      - CATALOG_BASE_URL=http://localhost:8080
      - TUNING_ARTIFACT_URL=./artifacts/emergency.json
    env_file:
      - .env
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./artifacts:/app/artifacts
      - ./config.yaml:/app/config.yaml:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "fetch('http://localhost:8080/health').then(r => process.exit(r.ok ? 0 : 1)).catch(() => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    depends_on:
      - catalog-db

  catalog-db:
    image: alpine:3.18
    volumes:
      - ./data:/data
    command: ["/bin/sh", "-c", "mkdir -p /data && chmod 755 /data && tail -f /dev/null"]
    restart: unless-stopped

  # Optional: Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./ops/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    profiles: ["monitoring"]

  # Optional: Grafana dashboards
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=bifrost
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./ops/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./ops/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    restart: unless-stopped
    profiles: ["monitoring"]
    depends_on:
      - prometheus

volumes:
  grafana-storage:

networks:
  default:
    name: bifrost-network